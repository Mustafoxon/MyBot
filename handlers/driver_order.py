# handlers/driver_order.py
from aiogram import Router, types, F
from aiogram.enums import ParseMode
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder
from utils import (
    load_users, get_all_passenger_orders, get_driver_order,
    find_matching_passengers, send_or_edit_text
)
from datetime import datetime, timedelta
from states import OrderState
import logging

router = Router()

# example: handlers/driver_order.py
# üõ† 2. –ú–∞–Ω–∑–∏–ª–Ω–∏ —Ç–∞–Ω–ª–∞—à (–≤–∏–ª–æ—è—Ç ‚Üí —Ç—É–º–∞–Ω) üèò “ö–∞–π—Å–∏ —Ç—É–º–∞–Ω–¥–∞–Ω –π—û–ª–≥–∞ —á–∏“õ–∞—Å–∏–∑? f"üìç *“ö–∞–π—Å–∏ —Ç—É–º–∞–Ω–≥–∞ –±–æ—Ä–∞—Å–∏–∑?*"
# ‚úÖ 1. –¢–∞—Å–¥–∏“õ–ª–∞—à —ë–∫–∏ –ë–µ–∫–æ—Ä “õ–∏–ª–∏—à (callback'–ª–∞—Ä)


# üßæ –§–∞“õ–∞—Ç –º–æ—Å –π—û–Ω–∞–ª–∏—à–¥–∞–≥–∏ –±—É—é—Ä—Ç–º–∞–ª–∞—Ä–Ω–∏ —á–∏“õ–∞—Ä–∏—à
@router.callback_query(F.data == "view_passenger_orders")
async def view_passenger_orders(callback: CallbackQuery):
    orders = get_all_passenger_orders()

    if not orders:
        await callback.message.answer("–ô—û–ª–æ–≤—á–∏ –±—É—é—Ä—Ç–º–∞–ª–∞—Ä–∏ —Ç–æ–ø–∏–ª–º–∞–¥–∏.")
        return

    text = "üßæ –ë–∞—Ä—á–∞ –π—û–ª–æ–≤—á–∏ –±—É—é—Ä—Ç–º–∞–ª–∞—Ä–∏:\n\n"
    for order in orders:
        text += (
            f"üìç {order['from']} ‚ûù {order['to']}\n"
            f"üìÖ {order['date']} | ‚è∞ {order['time']}\n"
            f"‚Ññ: {order['order_number']}\n\n"
        )

    await callback.message.answer(text)

@router.callback_query(lambda c: c.data.startswith("select_passenger_"))
async def show_passenger_info(callback_query: CallbackQuery):
    user_id = callback_query.data.split("_")[-1]
    users = load_users()

    user_data = users.get(user_id)
    if not user_data or "order" not in user_data:
        await callback_query.message.answer("–ë—É –π—û–ª–æ–≤—á–∏ –º–∞—ä–ª—É–º–æ—Ç–ª–∞—Ä–∏ —Ç–æ–ø–∏–ª–º–∞–¥–∏.")
        return

    order = user_data["order"]
    order_text = (
        f"üìç –ú–∞–Ω–∑–∏–ª: {order.get('from_district')} ‚û° {order.get('to_district')}\n"
        f"üïî –ö–µ—Ç–∏—à –≤–∞“õ—Ç–∏: {order.get('time')}\n"
        f"üì¶ –ë—É—é—Ä—Ç–º–∞ ‚Ññ: {order.get('order_number')}"
    )

    contact_button = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìû –ë–æ“ì–ª–∞–Ω–∏—à", url=f"tg://user?id={user_id}")]
    ])

    await callback_query.message.answer(order_text, reply_markup=contact_button)

@router.callback_query(F.data.startswith("passenger_order_"))
async def show_passenger_order(callback_query: CallbackQuery):
    data = callback_query.data  # –ú–∞—Å–∞–ª–∞–Ω: "passenger_order_123456789_2"
    parts = data.split("_")

    if len(parts) < 4:
        await callback_query.message.answer("‚ùå –ë—É—é—Ä—Ç–º–∞ –º–∞—ä–ª—É–º–æ—Ç–ª–∞—Ä–∏ –Ω–æ—Ç—û“ì—Ä–∏.")
        return
    
    passenger_id = parts[2]
    order_index = parts[3]

    users = load_users()
    passenger_data = users.get(passenger_id, {})
    order_history = passenger_data.get("order_history", [])

    try:
        order = order_history[int(order_index)]
        from_district = order.get("from_district", "‚ùì")
        to_district = order.get("to_district", "‚ùì")
        date = order.get("date", "‚ùì")
        time = order.get("time", "‚ùì")
        order_number = order.get("order_number", "‚ùì")

        message = (
            f"üì¶ –ë—É—é—Ä—Ç–º–∞ ‚Ññ{order_number}\n"
            f"üöè “ö–∞–µ—Ä–¥–∞–Ω: {from_district}\n"
            f"üéØ “ö–∞–µ—Ä–≥–∞: {to_district}\n"
            f"üìÖ –ö–µ—Ç–∏—à —Å–∞–Ω–∞—Å–∏: {date}\n"
            f"üï∞ –ö–µ—Ç–∏—à –≤–∞“õ—Ç–∏: {time}"
        )
        await callback_query.message.answer(message)
    except (IndexError, ValueError):
        await callback_query.message.answer("‚ùå –ë—É—é—Ä—Ç–º–∞ —Ç–æ–ø–∏–ª–º–∞–¥–∏.")

# ‚úÖ 3. “≤–∞–π–¥–æ–≤—á–∏–≥–∞ –º–æ—Å –π—û–ª–æ–≤—á–∏–ª–∞—Ä–Ω–∏ —á–∏“õ–∞—Ä–∏—à:
@router.callback_query(F.data == "show_matching_passengers")
async def show_matching_passengers(callback_query: CallbackQuery):
    user_id = str(callback_query.from_user.id)
    driver_orders = get_driver_order(user_id)

    passengers = find_matching_passengers(driver_orders)

    if not passengers:
        await callback_query.message.answer("“≤–æ–∑–∏—Ä—á–∞ –º–æ—Å –∫–µ–ª–∞–¥–∏–≥–∞–Ω –π—û–ª–æ–≤—á–∏–ª–∞—Ä –π—û“õ.")
    else:
        text = "üöó –ú–æ—Å –π—û–ª–æ–≤—á–∏–ª–∞—Ä:\n\n"
        for p in passengers:
            text += f"üë§ ID: {p['user_id']}\nüìç {p['from']} ‚û°Ô∏è {p['to']}\nüìÖ {p['date']}, ‚è∞ {p['time']}\n\n"
        await callback_query.message.answer(text)

@router.message(lambda message: message.text == "üë• –ú–æ—Å –π—û–ª–æ–≤—á–∏–ª–∞—Ä")
async def show_matching_passengers(message: Message):
    user_id = str(message.from_user.id)
    driver_order = get_driver_order(user_id)

    if not driver_order:
        await message.answer("–°–∏–∑ “≥–∞–ª–∏ –º–∞—Ä—à—Ä—É—Ç –∫–∏—Ä–∏—Ç–º–∞–≥–∞–Ω—Å–∏–∑.")
        return

    passengers = find_matching_passengers(driver_order)

    if not passengers:
        await message.answer("“≤–æ–∑–∏—Ä—á–∞ –º–æ—Å –∫–µ–ª–∞–¥–∏–≥–∞–Ω –π—û–ª–æ–≤—á–∏–ª–∞—Ä –π—û“õ.")
        return

    text = "üöò –ú–æ—Å –∫–µ–ª–∞–¥–∏–≥–∞–Ω –π—û–ª–æ–≤—á–∏–ª–∞—Ä:\n\n"
    for p in passengers:
        text += f"üìç {p['from']} ‚Üí {p['to']}\nüïí {p['date']}\nüïí {p['time']}\nüì¶ –ë—É—é—Ä—Ç–º–∞ ‚Ññ{p['order_number']}\n\n"

    await message.answer(text)

@router.callback_query(lambda c: c.data.startswith("departed_"))
async def handle_departure_response(callback_query: CallbackQuery):
    data_parts = callback_query.data.split("_")
    answer = data_parts[1]
    driver_id = data_parts[2]

    if answer == "yes":
        await callback_query.message.edit_text("‚úÖ –°–∞—Ñ–∞—Ä–∏–Ω–≥–∏–∑ –º—É–≤–∞—Ñ—Ñ–∞“õ–∏—è—Ç–ª–∏ –±–æ—à–ª–∞–Ω–≥–∞–Ω–∏ —É—á—É–Ω —Ä–∞“≥–º–∞—Ç! –ô—û–ª–∏–Ω–≥–∏–∑ –±–µ–º–∏–Ω–∞—Ç –±—û–ª—Å–∏–Ω.")
        # –ê–≥–∞—Ä –∫–µ—Ä–∞–∫ –±—û–ª—Å–∞, –±–∞–∑–∞–¥–∞ `status`: 'on_way' —ë–∫–∏ `departed_at` –±–µ–ª–≥–∏—Å–∏ “õ—û—à–∏—à –º—É–º–∫–∏–Ω
    else:
        await callback_query.message.edit_text("‚ùå “≤–∞–ª–∏ –π—û–ª–≥–∞ —á–∏“õ–º–∞–≥–∞–Ω–∏–Ω–≥–∏–∑ “õ–∞–π–¥ —ç—Ç–∏–ª–¥–∏. –ò–ª—Ç–∏–º–æ—Å, —Ç–∞–π—ë—Ä –±—û–ª–≥–∞–Ω–¥–∞ –º–∞—ä–ª—É–º “õ–∏–ª–∏–Ω–≥.")
