# bot.py
import json
import logging
import asyncio
import sys
import os

sys.path.append(os.path.abspath(os.path.dirname(__file__)))
from config import TOKEN

try:
    # –ë–∞—Ä—á–∞ –∫–µ—Ä–∞–∫–ª–∏ —Ö–∞–Ω–¥–ª–µ—Ä–ª–∞—Ä –∏–º–ø–æ—Ä—Ç “õ–∏–ª–∏–Ω–∞–¥–∏
    from aiogram import Bot, Dispatcher
    from aiogram.types import Message
    from aiogram.fsm.context import FSMContext
    from handlers.start import router as start_router
    from handlers.admin import router as admin_router
    from handlers.common_order import router as common_order_router
    from handlers.edit_order import router as edit_order_router
    from handlers.driver_order import router as driver_order_router
    from handlers.driver_info import router as driver_info_router
    print("‚úÖ –ë–∞—Ä—á–∞ —Ö–∞–Ω–¥–ª–µ—Ä–ª–∞—Ä –∏–º–ø–æ—Ä—Ç “õ–∏–ª–∏–Ω–¥–∏")
except Exception as e:
    print(f"‚ùå –•–∞–Ω–¥–ª–µ—Ä –∏–º–ø–æ—Ä—Ç “õ–∏–ª–∏—à–¥–∞ —Ö–∞—Ç–æ–ª–∏–∫: {e}")

# –õ–æ–≥–ª–∞—Ä–Ω–∏ —ë–∑–∏—à 
logging.basicConfig(level=logging.INFO)
print("üîÑ –ë–æ—Ç –∏—à–≥–∞ —Ç—É—à–∏—Ä–∏–ª–º–æ“õ–¥–∞...")

# –§–∞–π–ª–≥–∞ –º–∞—ä–ª—É–º–æ—Ç —ë–∑–∏—à
def create_empty_user_status_file():
    users = {}
    file_path = os.path.join(os.path.dirname(__file__), "user_statuses.json")
    logging.info(f"–§–∞–π–ª —è—Ä–∞—Ç–∏—à: {file_path}")
    try:
        with open(file_path, "w") as file:
            json.dump(users, file)
        logging.info(f"–§–∞–π–ª —è—Ä–∞—Ç–∏–ª–¥–∏: {file_path}")
    except Exception as e:
        logging.error(f"–§–∞–π–ª —è—Ä–∞—Ç–∏—à–¥–∞ —Ö–∞—Ç–æ–ª–∏–∫: {str(e)}")

# –ê–≥–∞—Ä —Ñ–∞–π–ª –º–∞–≤–∂—É–¥ –±—û–ª–º–∞—Å–∞, —è–Ω–≥–∏–¥–∞–Ω —è—Ä–∞—Ç–∏—à
file_path = os.path.join(os.path.dirname(__file__), "user_statuses.json")
try:
    with open(file_path, "r") as file:
        logging.info(f"–§–∞–π–ª —Ç–æ–ø–∏–ª–¥–∏: {file_path}")
except FileNotFoundError:
    logging.error(f"–§–∞–π–ª —Ç–æ–ø–∏–ª–º–∞–¥–∏, —è–Ω–≥–∏–¥–∞–Ω —è—Ä–∞—Ç–∏—à –∫–µ—Ä–∞–∫: {file_path}")
    create_empty_user_status_file()

# –ë–æ—Ç–Ω–∏ –≤–∞ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–Ω–∏ —è—Ä–∞—Ç–∏—à
bot = Bot(token=TOKEN)
dp = Dispatcher()

# –•–∞–Ω–¥–ª–µ—Ä–Ω–∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–≥–∞ —É–ª–∞—à
dp.include_router(start_router)
dp.include_router(admin_router)
dp.include_router(common_order_router)
dp.include_router(edit_order_router)
dp.include_router(driver_order_router)
dp.include_router(driver_info_router)

async def main():
    logging.info("ü§ñ –ë–æ—Ç –∏—à–≥–∞ —Ç—É—à–¥–∏!")
    try:
        me = await bot.get_me()
        print(f"–ë–æ—Ç –º–∞—ä–ª—É–º–æ—Ç–ª–∞—Ä–∏: @{me.username}")
    except Exception as e:
        print(f"‚ùå –ë–æ—Ç–Ω–∏ —Ç–µ–∫—à–∏—Ä–∏—à–¥–∞ —Ö–∞—Ç–æ–ª–∏–∫: {e}")
    await dp.start_polling(bot)  # start_polling'ni ishlatish

if __name__ == "__main__":
    asyncio.run(main())  # asyncio yordamida main funksiyasini ishga tushurish
